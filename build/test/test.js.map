{"version":3,"sources":["../../api/test/test.js"],"names":["chai","use","chatHttp","expect","describe","it","done","patient","name","hospital_no","gender","request","app","post","set","send","end","err","res","status","to","equal","body","data","include","id","get","should","have","property","patientId","eql","updatedPatient","put"],"mappings":"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","sourcesContent":["import chai from 'chai';\nimport chatHttp from 'chai-http';\nimport 'chai/register-should';\nimport app from '../index';\n\nchai.use(chatHttp);\nconst { expect } = chai;\n\ndescribe('Testing the Binimi endpoints:', () => {\n  it('It should create a patient', (done) => {\n    const patient = {\n      name: 'Salako Dada',\n      hospital_no: 9,\n      gender: 'Male'\n    };\n    chai.request(app)\n      .post('/api/v1/binimi')\n      .set('Accept', 'application/json')\n      .send(patient)\n      .end((err, res) => {\n        expect(res.status).to.equal(201);\n        expect(res.body.data).to.include({\n          id: 1,\n          name: patient.name,\n          hospital_no: patient.hospital_no,\n          gender: patient.gender\n        });\n        done();\n      });\n  });\n\n  it('It should not create a patient with incomplete parameters', (done) => {\n    const patient = {\n      hospital_no: '2',\n      gender: 'Female'\n    };\n    chai.request(app)\n      .post('/api/v1/binimi')\n      .set('Accept', 'application/json')\n      .send(patient)\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        done();\n      });\n  });\n\n  it('It should get all patients', (done) => {\n    chai.request(app)\n      .get('/api/v1/binimi')\n      .set('Accept', 'application/json')\n      .end((err, res) => {\n        expect(res.status).to.equal(200);\n        res.body.data[0].should.have.property('id');\n        res.body.data[0].should.have.property('name');\n        res.body.data[0].should.have.property('hospital_no');\n        res.body.data[0].should.have.property('gender');\n        done();\n      });\n  });\n\n  it('It should get a particular patient', (done) => {\n    const patientId = 1;\n    chai.request(app)\n      .get(`/api/v1/binimi/${patientId}`)\n      .set('Accept', 'application/json')\n      .end((err, res) => {\n        expect(res.status).to.equal(200);\n        res.body.data.should.have.property('id');\n        res.body.data.should.have.property('name');\n        res.body.data.should.have.property('hospital_no');\n        res.body.data.should.have.property('gender');\n        done();\n      });\n  });\n\n  it('It should not get a particular patient with invalid id', (done) => {\n    const patientId = 8888;\n    chai.request(app)\n      .get(`/api/v1/binimi/${patientId}`)\n      .set('Accept', 'application/json')\n      .end((err, res) => {\n        expect(res.status).to.equal(404);\n        res.body.should.have.property('message')\n                            .eql(`Cannot find patient with the id ${patientId}`);\n        done();\n      });\n  });\n\n  it('It should not get a particular patient with non-numeric id', (done) => {\n    const patientId = 'aaa';\n    chai.request(app)\n      .get(`/api/v1/binimi/${patientId}`)\n      .set('Accept', 'application/json')\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        res.body.should.have.property('message')\n                            .eql('Please input a valid numeric value');\n        done();\n      });\n  });\n\n  it('It should update a patient', (done) => {\n    const patientId = 1;\n    const updatedPatient = {\n      id: patientId,\n      name: 'Sesame Bam',\n      hospital_no: '3',\n      gender: 'Male'\n    };\n    chai.request(app)\n      .put(`/api/v1/binimi/${patientId}`)\n      .set('Accept', 'application/json')\n      .send(updatedPatient)\n      .end((err, res) => {\n        expect(res.status).to.equal(200);\n        expect(res.body.data.id).equal(updatedPatient.id);\n        expect(res.body.data.name).equal(updatedPatient.name);\n        expect(res.body.data.hospital_no).equal(updatedPatient.hospital_no);\n        expect(res.body.data.gender).equal(updatedPatient.gender);\n        done();\n      });\n  });\n\n  it('It should not update a patient with invalid id', (done) => {\n    const patientId = '9999';\n    const updatedPatient = {\n      id: patientId,\n      name: 'Sasame Bam',\n      hospital_no: '23',\n      gender: 'Male'\n    };\n    chai.request(app)\n      .put(`/api/v1/binimi/${patientId}`)\n      .set('Accept', 'application/json')\n      .send(updatedPatient)\n      .end((err, res) => {\n        expect(res.status).to.equal(404);\n        res.body.should.have.property('message')\n                            .eql(`Cannot find patient with the id: ${patientId}`);\n        done();\n      });\n  });\n\n  it('It should not update a patient with non-numeric id value', (done) => {\n    const patientId = 'ggg';\n    const updatedPatient = {\n      id: patientId,\n      name: 'Sesame Dada',\n      hospital_no: '9',\n      gender: 'Male'\n    };\n    chai.request(app)\n      .put(`/api/v1/binimi/${patientId}`)\n      .set('Accept', 'application/json')\n      .send(updatedPatient)\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        res.body.should.have.property('message')\n                            .eql('Please input a valid numeric value');\n        done();\n      });\n  });\n\n\n  it('It should delete a patient', (done) => {\n    const patientId = 1;\n    chai.request(app)\n      .delete(`/api/v1/binimi/${patientId}`)\n      .set('Accept', 'application/json')\n      .end((err, res) => {\n        expect(res.status).to.equal(200);\n        expect(res.body.data).to.include({});\n        done();\n      });\n  });\n\n  it('It should not delete a patient with invalid id', (done) => {\n    const patientId = 777;\n    chai.request(app)\n      .delete(`/api/v1/binimi/${patientId}`)\n      .set('Accept', 'application/json')\n      .end((err, res) => {\n        expect(res.status).to.equal(404);\n        res.body.should.have.property('message')\n                            .eql(`Patient with the id ${patientId} cannot be found`);\n        done();\n      });\n  });\n\n  it('It should not delete a patient with non-numeric id', (done) => {\n    const patientId = 'bbb';\n    chai.request(app)\n      .delete(`/api/v1/binimi/${patientId}`)\n      .set('Accept', 'application/json')\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        res.body.should.have.property('message').eql('Please provide a numeric value');\n        done();\n      });\n  });\n});"],"file":"test.js"}