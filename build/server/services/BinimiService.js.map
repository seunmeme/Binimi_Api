{"version":3,"sources":["../../../api/server/services/BinimiService.js"],"names":["BinimiService","database","Binimi","findAll","newPatient","create","id","updatePatient","findOne","where","Number","patientToUpdate","update","thePatient","patientToDelete","destroy","deletedPatient"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;IAEMA,a;;;;;;;;;;;;;;;;;;;uBAGaC,mBAASC,MAAT,CAAgBC,OAAhB,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMOC,U;;;;;;;uBAEPH,mBAASC,MAAT,CAAgBG,MAAhB,CAAuBD,UAAvB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMUE,E,EAAIC,c;;;;;;;;uBAEGN,mBAASC,MAAT,CAAgBM,OAAhB,CAAwB;AACpDC,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AAD6C,iBAAxB,C;;;AAAxBK,gBAAAA,e;;qBAIFA,e;;;;;;uBACIV,mBAASC,MAAT,CAAgBU,MAAhB,CAAuBL,cAAvB,EAAsC;AAAEE,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AAAT,iBAAtC,C;;;kDAECC,c;;;kDAEF,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMcD,E;;;;;;;;uBAEIL,mBAASC,MAAT,CAAgBM,OAAhB,CAAwB;AAC/CC,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AADwC,iBAAxB,C;;;AAAnBO,gBAAAA,U;kDAICA,U;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMgBP,E;;;;;;;;uBAEOL,mBAASC,MAAT,CAAgBM,OAAhB,CAAwB;AAAEC,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AAAT,iBAAxB,C;;;AAAxBQ,gBAAAA,e;;qBAEFA,e;;;;;;uBAC2Bb,mBAASC,MAAT,CAAgBa,OAAhB,CAAwB;AACnDN,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AAD4C,iBAAxB,C;;;AAAvBU,gBAAAA,c;kDAGCA,c;;;kDAEF,I;;;;;;;;;;;;;;;;;;;;;;;;;eAOEhB,a","sourcesContent":["import database from '../src/models';\n\nclass BinimiService {\n  static async getAllPatients() {\n    try {\n      return await database.Binimi.findAll();\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static async addPatient(newPatient) {\n    try {\n      return await database.Binimi.create(newPatient);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static async updatePatient(id, updatePatient) {\n    try {\n      const patientToUpdate = await database.Binimi.findOne({\n        where: { id: Number(id) }\n      });\n\n      if (patientToUpdate) {\n        await database.Binimi.update(updatePatient, { where: { id: Number(id) } });\n\n        return updatePatient;\n      }\n      return null;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static async getAPatient(id) {\n    try {\n      const thePatient = await database.Binimi.findOne({\n        where: { id: Number(id) }\n      });\n\n      return thePatient;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static async deletePatient(id) {\n    try {\n      const patientToDelete = await database.Binimi.findOne({ where: { id: Number(id) } });\n\n      if (patientToDelete) {\n        const deletedPatient = await database.Binimi.destroy({\n          where: { id: Number(id) }\n        });\n        return deletedPatient;\n      }\n      return null;\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\nexport default BinimiService;"],"file":"BinimiService.js"}